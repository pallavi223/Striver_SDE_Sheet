

1- Approach --> Naive one --> using count

class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
  ListNode* curr = head;
    int count=0;
    while(curr != NULL){
        
        curr = curr->next;
        count++;
    }
    curr = head;
    if(n == count){
        return head->next;
    }
    for(int i=1;i<count-n;i++){
        curr = curr->next;
    }
    curr->next = curr->next->next;
    return head;
}
};

2. Using two pointer --> fast & slow approach (efficient)
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        ListNode* fast = head;
        ListNode* slow = head;
        while(n--){
            fast = fast->next;
        }
        if(fast == NULL){
            return slow->next;
        }
        while(fast->next != NULL){
            fast = fast->next;
            slow = slow->next;
        }
        slow -> next = slow ->next->next;
        return head;
    }
