Detect loop and find the starting node of the loop

1. Brute force approach
void createCycle(node* &head,int pos) {
    node* ptr = head;
    node* temp = head;
    int cnt = 0;
    while(temp->next != NULL) {
        if(cnt != pos) {
            ++cnt;
            ptr = ptr->next;
        } 
        temp = temp->next;
    }
    temp->next = ptr;
}
//process as per mentioned in solution
node* detectCycle(node* head) {
    unordered_set<node*> st;
    while(head != NULL) {
        if(st.find(head) != st.end()) return head;
        st.insert(head);
        head = head->next;
    }
    return NULL;
}


2. using floydCycleDetection algorithm

Node* floydCycleDetection(Node* &head){
    Node* fast = head;
    Node* slow = head;
    if(head == NULL )
        return NULL;
    while(fast != NULL && fast->next != NULL){
        fast = fast->next->next;
        slow = slow->next;
        if(slow == fast){
            return slow;
        }
    }
    return NULL;
}
Node *firstNode(Node *head)
{
     if(head == NULL )
        return NULL;
    Node* slow = head;
	Node* intersection = floydCycleDetection(head);
    if(intersection == NULL){
        return NULL;
    }
    while(slow != intersection){
        slow = slow->next;
        intersection = intersection->next;
    }
    retu
