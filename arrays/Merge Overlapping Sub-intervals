Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6]


BRUTE FORCE: 
Time Complexity: O(NlogN)+O(N*N). O(NlogN) for sorting the array, and O(N*N) because we are checking to the right for each index which is a nested loop.
Space Complexity: O(N), as we are using a separate data structure.

#include<bits/stdc++.h>
using namespace std;

vector < pair < int, int >> merge(vector < pair < int, int >> & arr) {

    int n = arr.size();
    sort(arr.begin(), arr.end());
    vector < pair < int, int >> ans;

    for (int i = 0; i < n; i++) {
        int start = arr[i].first, end = arr[i].second;

        //since the intervals already lies 
        //in the data structure present we continue
        if (!ans.empty()) {
            if (start <= ans.back().second) {
                continue;
            }
        }

        for (int j = i + 1; j < n; j++) {
            if (arr[j].first <= end) {
                end = max(end, arr[j].second);
            }
        }
    
        end = max(end, arr[i].second);

        ans.push_back({start, end});
    }

    return ans;
}

int main() {
    vector < pair < int, int >> arr;
    arr = {{1,3},{2,4},{2,6},{8,9},{8,10},{9,11},{15,18},{16,17}};
    vector < pair < int, int >> ans = merge(arr);

    cout << "Merged Overlapping Intervals are " << endl;

    for (auto it: ans) {
        cout << it.first << " " << it.second << "\n";
    }
}



OPTIMAL SOLUTION

public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        //agr sorted form me ni hoga to hmra comparison galat hojyga
        
        vector<vector<int>> ans;
        if(intervals.size()==0){
            return ans;
        }
        //lambda expression
        sort(intervals.begin(), intervals.end(),[](vector<int>&a, vector<int>&b){
return a[0]<b[0];
 });
    vector<int> curr = intervals[0];
    for(int i=1;i<intervals.size();i++){
        if(curr[1] < intervals[i][0]){
            ans.push_back(curr);
            curr = intervals[i];
        }
        else{
            curr[1] = max(curr[1], intervals[i][1]);
        }
    }  
    ans.push_back(curr);
    return ans;  
    }
};
