#include <iostream>
using namespace std;


int factorial(int n){
    int f=1;
    while(n>=1){
        f=f*n;
        n--;
    }
    return(f);
}

int combination(int n, int r){
    return (factorial(n) / factorial(n-r)/factorial(r));
}

void printPascal(int line){
    int i,j,k,r;
    for(int i=1;i<=line;i++){
        k=1;
        r=0;
        for(j=1;j<=2*line-1;j++){
            if(j>=line+1-i && j<=line-1+i && k){
                cout<<"  "<<combination(i-1, r);
                k=0;
                r++;
            }
            else{
                cout<<" ";
                k=1;
            }
        }
        
        cout<<endl;
    }
    
}
int main() {
   printPascal(5);

  
}


Time Complexity = O(numRows2).

Space Complexity: Since we are creating a 2D array, space complexity = O(numRows2).

public:
    vector<vector<int>> generate(int numRows) {
        vector<vector<int>> ans;
        for(int i=0;i<numRows;i++){
            vector<int> row(i+1, 1);
            for(int j=1;j<i;j++){
                row[j] = ans[i-1][j]+ans[i-1][j-1];
            }
            ans.push_back(row);
        }
        return ans;
    }
};
