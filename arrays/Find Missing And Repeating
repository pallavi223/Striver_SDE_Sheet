
N = 2
Arr[] = {2, 2}
Output: 2 1
Explanation: Repeating number is 2 and 
smallest positive missing number is 1.

################ using frequency array
T(C) - O(N)
S(C) - O(N)

    int *findTwoElement(int *arr, int n) {
       int *freq = new int[n+1];
       int *ans = new int[2];
       for(int i=0;i<n;i++){
           freq[arr[i]]++;  //count freq of each element present in array
       }
       for(int i=1;i<=n;i++){
           if(freq[i] == 0 ) //if count is 0 meaning missin ele
               ans[1] = i;  
           if(freq[i] > 1) //if count is more than 1 meaning duplicate ele
               ans[0] = i;
       }
       return ans;
    }
    
    
    
######################### Optimal Solution

T(C) - O(N)
S(C) - O(1)


    int *findTwoElement(int *arr, int n) {
          int a, b;
          for(int i=0;i<n;i++){
              if(arr[abs(arr[i])-1] < 0){
                  a = abs(arr[i]);
              }
              else{
                  arr[abs(arr[i])-1] = -arr[abs(arr[i])-1];
              }
          }
          //iterate array and check for positive no and print that number index+1
          
          for(int i=0;i<n;i++){
              if(arr[i] > 0){
                  b = i+1;
                  break;
              }
          }
          int *v = new int[2];
          v[0] = a;
          v[1] = b;
          return v;
    }
    
    
Q - what if  we are not allowed to modify the array element  ??

Then make a temporary array and initialise it with zeroes,traverse the array mark the visited values as negative or one in temporary array...if we got already marked index in temporary array than it is repeating element,
now after this traverse the array and check if there is any index left with value zero than that will be missing element....t.c.-o(n)...but s.c.-o(n)
