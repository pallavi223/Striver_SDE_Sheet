Problem Statement: Given an array of N + 1 size, where each element is between 1 and N. 
Assuming there is only one duplicate number, your task is to find the duplicate number.


Input: nums = [1,3,4,2,2]
Output: 2



############################### sol using sorting
T(C) - O(nlogn + N)    NlogN for sorting the array and O(N) for traversing through the array and checking if adjacent elements are equal or not. 
But this will distort the array.
S(C) - O(1)


class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        int ans = 0;
        sort(nums.begin(), nums.end());
        for(int i=0;i<nums.size();i++){
            if(nums[i] == nums[i+1]){
               ans = nums[i+1];
               break;
            }
        }
       return ans;
        
    }
};


Solution 2:Using frequency array

Approach: Take a frequency array of size N+1 and initialize it to 0.
Now traverse through the array and if the frequency of the element is 0 increase it by 1, else if the frequency is not 0 then that element is the required answer.


using namespace std;
int findDuplicate(vector < int > & arr) {
  int n = arr.size();
  int freq[n + 1] = {
    0
  };
  for (int i = 0; i < n; i++) {
    if (freq[arr[i]] == 0) {
      freq[arr[i]] += 1;
    } else {
      return arr[i];
    }
  }
  return 0;
}

Time Complexity: O(N), as we are traversing through the array only once.

Space Complexity: O(N), as we are using extra space for frequency array.



############################### LinkedList cycle sol -- optimal sol
T(C) - O(N)
S(C) - O(1)



class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        
        //LinkedList Cycle method or Tortoise method
        //here we take two pntr slow and fast where slow pnt moves by 1 step and fast moves 2step and hence when slow and fast pointer meets at a point than tht is the duplicate number

       //initially both are in first position
        int slow = nums[0];
        int fast = nums[0];

        do{
            slow = nums[slow];
            fast = nums[nums[fast]]; //moves 2 step
        } while(slow != fast);

        fast = nums[0];
        while(slow != fast){
            slow = nums[slow];
            fast = nums[fast];
        }

//return either slow or fast both pointing to same number
return slow;
        
    }
};
